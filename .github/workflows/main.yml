# Basic workflow to deploy on EC2

name: Texty Server Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
    paths:
      - server/**
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v3

    - name: rsync deployments
      uses: burnett01/rsync-deployments@5.1
      with:
        switches: -avzr --delete
        path: ./*
        remote_path: //home/ec2-user/Chat-Application
        remote_host: ${{ secrets.HOSTNAME }}
        remote_user: ${{ secrets.USER }}
        remote_key: "${{ secrets.EC2_PRIVATE_KEY }}"

    - name: install dependencies
      run: |
        ls
        cd database
        npm ci
        cd ../server
        npm ci
        pm2 start ecosystem.config.js --env dev
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      # - name: Deploy in EC2
      #   env:
      #       PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY  }}
      #       HOSTNAME : ${{ secrets.HOSTNAME  }}
      #       USER_NAME : ${{ secrets.USER  }}
            
      #   run: |
      #     echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #     ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}
          
            # #Now we have got the access of EC2 and we will start the deploy .
            # DIR="/home/ec2-user/Chat-Application"
            # pm2 delete all
            # cd /home/ec2-user
            
            # if [ ! -d $DIR ]
            # then
            #   git clone git@github.com:dev-kudli/Chat-Application.git &&
            #   cd Chat-Application\server &&
            #   npm ci
            #   cd ..\database
            #   npm ci
            #   cd ..
            # else
            #   cd Chat-Application
            # fi
            
            # git checkout master &&
            # git fetch --all &&
            # git reset --hard origin/master &&
            # git pull origin master &&
            # cd server
            # pm2 start index.js
